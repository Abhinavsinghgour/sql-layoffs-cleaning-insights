-- EDA : Exploratory Data Analysis 

-- Here we are jsut going to explore the data and find trends or patterns or anything interesting like outliers

-- normally when you start the EDA process you have some idea of what you're looking for

-- with this info we are just going to look around and see what we find!


SELECT * 
FROM world_layoffs.layoffs_staging2;

-- EASIER QUERIES

SELECT MAX(total_laid_off)
FROM world_layoffs.layoffs_staging2;

-- Which companies had 1 which is basically 100 percent of they company laid off
select MAX( percentage_laid_off), MIN(percentage_laid_off)
from layoffs_staging2
WHERE  percentage_laid_off IS NOT NULL;

-- these are mostly startups it looks like who all went out of business during this time
SELECT * 
FROM world_layoffs.layoffs_staging2
WHERE percentage_laid_off =1;

SELECT * 
FROM world_layoffs.layoffs_staging2
WHERE percentage_laid_off =1 AND country = 'india'; -- COUNTRY SPECIFIC 


-- if we order by funcs_raised_millions we can see how big some of these companies were
SELECT company, industry ,funds_raised_millions
FROM world_layoffs.layoffs_staging2
WHERE  percentage_laid_off = 1 -- 100% laid off
ORDER BY funds_raised_millions DESC;

SELECT company, industry ,funds_raised_millions,percentage_laid_off
FROM world_layoffs.layoffs_staging2
WHERE  percentage_laid_off like '0%' OR '1'-- may be not 100%  laid off
ORDER BY funds_raised_millions DESC;

SELECT *
FROM world_layoffs.layoffs_staging2
WHERE  percentage_laid_off = 1
ORDER BY funds_raised_millions DESC;
-- BritishVolt looks like an EV company, Quibi! I recognize that company - wow raised like 2 billion dollars and went under - ouch






-- SOMEWHAT TOUGHER AND MOSTLY USING GROUP BY--------------------------------------------------------------------------------------------------

-- Companies with the biggest single Layoff

SELECT company, total_laid_off
FROM layoffs_staging2
ORDER BY 2 DESC
LIMIT 5;
-- now that's just on a single day

-- Companies with the most ðŸ”¥ðŸ”¥Total Layoffs -- like insight Amazon has highest total laid off.
SELECT company, SUM(total_laid_off)
FROM layoffs_staging2
GROUP BY company
ORDER BY 2 DESC
LIMIT 5;


-- by Industry/ Location
SELECT industry, SUM(total_laid_off)
FROM layoffs_staging2
GROUP BY industry
ORDER BY 2 DESC
LIMIT 10;

-- by Date
SELECT `date`, SUM(total_laid_off)
FROM layoffs_staging2
GROUP BY `date`
ORDER BY 1 DESC
;
-- this it total in the past 3 years or in the dataset
SELECT YEAR(`date`), SUM(total_laid_off)
FROM layoffs_staging2
GROUP BY YEAR(`date`)
ORDER BY 1 DESC;

--  stage
SELECT stage, SUM(total_laid_off)
FROM layoffs_staging2
GROUP BY stage
ORDER BY 2 DESC
LIMIT 10;






-- TOUGHER QUERIES------------------------------------------------------------------------------------------------------------------------------------


SELECT SUBSTRING(date,1,7) as dates, SUM(total_laid_off) AS total_off
FROM layoffs_staging2
GROUP BY dates
ORDER BY dates ASC;

-- SHORTLISTING data based on date but only on monthly basis of 3 year combine may not be useful and effective for EDA
SELECT substring(`date`,6,2) as Months , SUM(total_laid_off)
FROM layoffs_staging2
where substring(`date`,6,2) is NOT NULL
GROUP BY Months
ORDER BY 1 ASC
;

-- Creating "Dates" column containing year-month which give clear data insight.ALTER
-- Rolling Total of Layoffs Per Month
SELECT substring(`date`,1,7) as Dates, SUM(total_laid_off)
FROM layoffs_staging2
WHERE substring(`date`,1,7) IS NOT NULL
GROUP BY Dates
ORDER BY 1 ASC
;

-- now use it in a CTE so we can query off of it
-- Rolling total


-- complete Rolling total
WITH DATE_CTE AS 
(
SELECT SUBSTRING(date,1,7) as dates, SUM(total_laid_off) AS total_laid_off
FROM layoffs_staging2
WHERE SUBSTRING(date,1,7) IS NOT NULL
GROUP BY dates
ORDER BY dates ASC
)
SELECT dates, SUM(total_laid_off) OVER (PARTITION BY YEAR(`date`) ORDER BY dates ASC) as rolling_total_layoffs
FROM DATE_CTE
ORDER BY dates ASC;




--  year vise rolling total  
WITH DATE_CTE AS (
    SELECT 
        SUBSTRING(date, 1, 7) AS month, -- YYYY-MM
        YEAR(date) AS year,  -- if i want year vise rolling total then we have to use "year" column
        SUM(total_laid_off) AS total_laid_off
    FROM layoffs_staging2
    WHERE date IS NOT NULL
    GROUP BY year, month
)
SELECT 
    month,
    year, -- if i want year vise rolling total then we have to use "year" column
    total_laid_off,
    SUM(total_laid_off) OVER (PARTITION BY year ORDER BY month) AS rolling_total_layoffs  -- Use ORDER BY inside OVER() â†’ to calculate rolling totals in the correct order.
FROM DATE_CTE
ORDER BY year, month;  -- Use ORDER BY outside â†’ to display your results nicely.

## NOTES: 
-- ðŸ§® 1. ORDER BY inside OVER() â†’ Affects how the rolling total is calculated

-- SUM(total_laid_off) OVER (PARTITION BY year ORDER BY month)

-- PARTITION BY year: resets the cumulative total each year.
-- ORDER BY month: ensures the cumulative total is added in chronological order within each year.

-- Use ORDER BY outside â†’ to display your results nicely.








-- Earlier we looked at Companies with the most Layoffs. Now let's look at that per year. It's a little more difficult.
-- I want to look at 
WITH COMPANY_YEAR AS
(
SELECT company, year(`date`) as years, Sum(total_laid_off) as total_off
FROM layoffs_staging2
WHERE total_laid_off IS NOT NULL
GROUP BY company, years
-- ORDER BY total_off DESC
),
company_year_rank AS
(
SELECT * ,
DENSE_RANK() OVER(PARTITION BY years ORDER BY total_off DESC) as Ranking
FROM company_year
WHERE years is not null
-- ORDER BY Ranking ASC
)
SELECT *
FROM company_year_rank
WHERE ranking <= 5
;



